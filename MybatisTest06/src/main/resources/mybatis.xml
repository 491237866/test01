<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!-- setting:控制mybatis全局行为-->
<!-- 指定properties文件的位置，从类路径根开始找文件-->
    <properties resource="jdbc.properties"></properties>
    <!--
    settings设置
    例如，可以在此处配置二级缓存，配置查询延迟加载策略等等。。。
            配置的目的是为了更加有效的查询表中的记录

      在实际开发中，setting的设置基本没用
      setting对于查询的优化不明显
    -->


    <settings>
         <!--设置mybatis输出日志-->
    <setting name="logImpl" value="STDOUT_LOGGING"/>
    </settings>
<!-- 定义别名-->
    <typeAliases>
        <!--第一种别名方式-->
        <!-- 可以指定一个类型一个自定义别名
        type:自定义类型的全限定名称
        alias：别名（短小，容易记忆的）
        -->
        <typeAlias type="com.bjpowernode.domain.Student" alias="stu"></typeAlias>
        <typeAlias type="com.bjpowernode.vo.ViewStudent" alias="vstu"></typeAlias>
        <!--第二种别名方式-->
        <!--
        <package> name是包名，这个包是所有类，类名就是别名（类名不区分大小写）
        -->
        <package name="com.bjpowernode.domain" />
        <package name="com.bjpowernode.vo"/>
    </typeAliases>
    <!-- 配置插件-->
<plugins>
    <plugin interceptor="com.github.pagehelper.PageInterceptor"></plugin>
</plugins>

    <!-- 环境配置:数据库的连接信息
        default:必须和某个environment的id值一样。
        告诉mybatis使用哪个数据库的连接信息。也就是访问哪个数据库
    -->
    <environments default="mydev">
        <!-- enviroment : 一个数据库信息的配置，环境
                id：一个唯一值，自定义，表示环境的名称。
        -->
        <environment id="mydev">
            <!--
            transactionManager:mybatis的事务类型 提交事务回滚事务
            1）type：JDBC（表示使用jdbc中的Connection对象的commit，rollback做事务处理）
            2）type:MANAGED:把mybatis的事务处理委托给其他的容器（一个服务器软件，一个框架(Spring)
            -->
            <transactionManager type="JDBC"/>
            <!--
                dataSource：表示数据源，连接数据库的
                在java体系中，规定实现了java.sql.DataSource接口的都是数据源
                    数据源表示连接Connection对象
                    type：表示数据源类型，
                    1)POOLED表示使用连接池 mybatis会创建PooledDataSource类
                    2)UPOOLED:不使用连接池，在每次执行sql语句，先创建连接，执行sql，在关闭连接
                        mybatis会创建一个UnpooleDataSource，管理Connection对象的使用
                    3)JNDI:java命名和目录服务（windows注册表）
            -->
            <dataSource type="POOLED">
                <!--
                dirver,user,usqername,password 是固定的，不能自定义。
                -->
                <property name="driver" value="${jdbc.Driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
    </environments>
    <!-- sql mapper(sql映射文件）的位置-->
    <mappers>
        <!-- 一个mapper标签指定一个文件的位置
            从类路径开始的路径信息。target/classes(类路径)
        -->
        <!-- 第一种方式：指定多个mapper文件-->
        <!--<mapper resource="com/bjpowernode/dao/StudentDao.xml"/>
        <mapper resource="com/bjpowernode/dao/OrderDao.xml"/>
        -->

        <!-- 第二种方式 ：使用包名
        name：xml文件（mapper文件）所在的包名
        这个包中所有的xml文件都能一次加载给mybatis.xml文件
        1.使用package文件名称需要和接口名称一样，区分大小写
        2.mapper文件和dao接口需要在同一目录
        -->
        <package name="com/bjpowernode/dao"/>
    </mappers>
</configuration>
<!--
    mybatis的主配置文件：主要定义了数据库的配置信息，sql映射文件的位置
    1.约束文件
    <!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
        mybatis-3-config.dtd（约束文件的名称）
     2.<configuration> 根标签。


-->